   1                   RESERVED1	= $fc
   2                   RESERVED2	= $fd
   3                   RESERVED3	= $fe
   4                   RESERVED4	= $ff
   5                   STACK = $0100
   6                   
   7                   PZERO		.segment
   8                   			LDA #$00
   9                   			PHA
  10                   			.endm
  11                   
  12                   PONE		.segment
  13                   			LDA #$01
  14                   			PHA
  15                   			.endm
  16                   
  17                   PBYTE		.segment
  18                   			LDA #\1
  19                   			PHA
  20                   			.endm
  21                   
  22                   PBYTEASW	.segment
  23                   			LDA #\1
  24                   			PHA
  25                   			LDA #$00
  26                   			PHA
  27                   			.endm
  28                   
  29                   PWORD		.segment
  30                   			LDA #<\1
  31                   			PHA
  32                   			LDA #>\1
  33                   			PHA
  34                   			.endm
  35                   			
  36                   PVARB		.segment		;Push byte variable to stack
  37                   			LDA @1
  38                   			PHA
  39                   			.endm
  40                   
  41                   PVARW		.segment		;Push word variable to stack
  42                   			LDA @1
  43                   			PHA
  44                   			LDA @1+1
  45                   			PHA
  46                   			.endm
  47                   
  48                   PVARI		.segment		;Push int variable to stack
  49                   			LDA @1
  50                   			PHA
  51                   			LDA @1+1
  52                   			PHA
  53                   			LDA @1+2
  54                   			PHA
  55                   			.endm
  56                   
  57                   PADDR	  	.segment		;Push address of target variable
  58                   			LDA #<@1
  59                   			PHA
  60                   			LDA #>@1
  61                   			PHA
  62                   			.endm
  63                   
  64                   PLB2VAR		.segment		;Pull byte to variable
  65                   			PLA
  66                   			STA @1
  67                   			.endm
  68                   
  69                   PLW2VAR		.segment		;Pull word to variable
  70                   			PLA
  71                   			STA @1+1
  72                   			PLA
  73                   			STA @1
  74                   			.endm
  75                   
  76                   PLI2VAR		.segment		;Pull int to variable
  77                   			PLA
  78                   			STA @1+2
  79                   			PLA
  80                   			STA @1+1
  81                   			PLA
  82                   			STA @1
  83                   			.endm
  84                   
  85                   CMPBLT		.macro		;Compare two bytes on stack for less than
  86                   			PLA
  87                   			STA RESERVED1
  88                   			PLA
  89                   			CMP RESERVED1
  90                   			BCC true
  91                   			#PZERO
  92                   			JMP end_CMPBLT
  93                   	true	#PONE
  94                   end_CMPBLT  .endm
  95                   
  96                   CMPBGTE		.macro		;Compare two bytes on stack for greater than or equal
  97                   			PLA
  98                   			STA RESERVED1
  99                   			PLA
 100                   			CMP RESERVED1
 101                   			BCS true
 102                   			#PZERO
 103                   			JMP end_CMPBGTE
 104                   	true	#PONE
 105                   end_CMPBGTE .endm
 106                   
 107                   CMPBEQ		.macro		;Compare two bytes on stack for equality
 108                   			PLA
 109                   			STA RESERVED1
 110                   			PLA
 111                   			CMP RESERVED1
 112                   			BEQ true
 113                   			#PZERO
 114                   			JMP end_CMPBEQ
 115                   	true	#PONE
 116                   end_CMPBEQ 	.endm
 117                   
 118                   CMPBNEQ		.macro		;Compare two bytes on stack for inequality
 119                   			PLA
 120                   			STA RESERVED1
 121                   			PLA
 122                   			CMP RESERVED1
 123                   			BNE true
 124                   			#PZERO
 125                   			JMP end_CMPBNEQ
 126                   	true	#PONE
 127                   end_CMPBNEQ .endm
 128                   
 129                   CMPBGT		.macro		;Compare two bytes on stack for greater than
 130                   			PLA
 131                   			STA RESERVED1
 132                   			PLA
 133                   			CMP RESERVED1
 134                   			BCS false
 135                   			#PONE
 136                   			JMP end_CMPBGT
 137                   	false	#PZERO
 138                   end_CMPBGT	.endm
 139                   
 140                   
 141                   CMPWEQ		.macro		;Compare two words on stack for equality
 142                   			PLA
 143                   			STA RESERVED1
 144                   			PLA
 145                   			STA RESERVED2
 146                   			PLA
 147                   			CMP RESERVED1
 148                   			BNE false
 149                   			PLA
 150                   			CMP RESERVED2
 151                   			BNE false+1
 152                   			#PONE
 153                   			JMP *+7
 154                   	false	PLA
 155                   			#PZERO
 156                   			.endm
 157                   
 158                   CMPWNEQ		.macro		;Compare two words on stack for inequality
 159                   			PLA
 160                   			STA RESERVED1
 161                   			PLA
 162                   			STA RESERVED2
 163                   			PLA
 164                   			CMP RESERVED1
 165                   			BNE true
 166                   			PLA
 167                   			CMP RESERVED2
 168                   			BNE true+1
 169                   			#PZERO
 170                   			JMP *+7
 171                   	true	PLA
 172                   			#PONE
 173                   			.endm
 174                   
 175                   CMPWLT		.macro		;Compare two words on stack for less than (Higher on stack < Lower on stack)
 176                   			TSX
 177                   			LDA STACK+4, x
 178                   			CMP STACK+2, x
 179                   			LDA STACK+3, x
 180                   			SBC STACK+1, x
 181                   			BCS false			
 182                   			INX
 183                   			INX
 184                   			INX
 185                   			INX
 186                   			TXS
 187                   			#PONE
 188                   			JMP *+11
 189                   	false	INX
 190                   			INX
 191                   			INX
 192                   			INX
 193                   			TXS
 194                   			#PZERO
 195                   end_CMPWLT  .endm
 196                   
 197                   CMPWGTE		.macro		;Compare two words on stack for greater than or equal (H >= L)
 198                   			TSX
 199                   			LDA STACK+4, x
 200                   			CMP STACK+2, x
 201                   			LDA STACK+3, x
 202                   			SBC STACK+1, x
 203                   			BCS true	
 204                   			INX
 205                   			INX
 206                   			INX
 207                   			INX
 208                   			TXS
 209                   			#PZERO
 210                   			JMP *+11
 211                   	true	INX
 212                   			INX
 213                   			INX
 214                   			INX
 215                   			TXS
 216                   			#PONE
 217                   end_CMPWGTE .endm
 218                   
 219                   CMPWGT		.macro		;Compare two words on stack for greater than (H > L)
 220                   			TSX
 221                   			LDA STACK+2, x
 222                   			CMP STACK+4, x
 223                   			LDA STACK+1, x
 224                   			SBC STACK+3, x
 225                   			BCC true	
 226                   			INX
 227                   			INX
 228                   			INX
 229                   			INX
 230                   			TXS
 231                   			#PZERO
 232                   			JMP *+11
 233                   	true	INX
 234                   			INX
 235                   			INX
 236                   			INX
 237                   			TXS
 238                   			#PONE
 239                   end_CMPWGT .endm
 240                   
 241                   CMPIEQ		.macro		;Compare two ints on stack for equality
 242                   			TSX
 243                   			LDA STACK+6, x
 244                   			CMP STACK+3, x
 245                   			BNE false
 246                   			LDA STACK+5, x
 247                   			CMP STACK+2, x
 248                   			BNE false
 249                   			LDA STACK+4, x
 250                   			CMP STACK+1, x
 251                   			BNE false
 252                   			#PONE
 253                   			JMP doinx
 254                   	false	#PZERO
 255                   	doinx	.repeat 6, $e8 ; 6 times INX	
 256                   			TXS
 257                   			.endm
 258                   
 259                   
 260                   CMPINEQ		.macro		;Compare two ints on stack for inequality
 261                   			TSX
 262                   			LDA STACK+6, x
 263                   			CMP STACK+3, x
 264                   			BEQ false
 265                   			LDA STACK+5, x
 266                   			CMP STACK+2, x
 267                   			BEQ false
 268                   			LDA STACK+4, x
 269                   			CMP STACK+1, x
 270                   			BEQ false
 271                   			#PONE
 272                   			JMP doinx
 273                   	false	#PZERO
 274                   	doinx	.repeat 6, $e8 ; 6 times INX	
 275                   			TXS
 276                   			.endm
 277                   
 278                   * = $0801
 279                   
 280                   #PBYTE 12
  18 0801 a9 0c        			LDA #\1
  19 0803 48           			PHA
 281                   #PBYTE 234
  18 0804 a9 ea        			LDA #\1
  19 0806 48           			PHA
 282                   #PBYTE 0
  18 0807 a9 00        			LDA #\1
  19 0809 48           			PHA
 283                   
 284                   #PBYTE 12
  18 080a a9 0c        			LDA #\1
  19 080c 48           			PHA
 285                   #PBYTE 234
  18 080d a9 ea        			LDA #\1
  19 080f 48           			PHA
 286                   #PBYTE 0
  18 0810 a9 00        			LDA #\1
  19 0812 48           			PHA
 287                   
 288                   #CMPIEQ
 242 0813 ba           			TSX
 243 0814 bd 06 01     			LDA STACK+6, x
 244 0817 dd 03 01     			CMP STACK+3, x
 245 081a d0 16        			BNE false
 246 081c bd 05 01     			LDA STACK+5, x
 247 081f dd 02 01     			CMP STACK+2, x
 248 0822 d0 0e        			BNE false
 249 0824 bd 04 01     			LDA STACK+4, x
 250 0827 dd 01 01     			CMP STACK+1, x
 251 082a d0 06        			BNE false
 252                   			#PONE
  13 082c a9 01        			LDA #$01
  14 082e 48           			PHA
 253 082f 4c 35 08     			JMP doinx
 254                   	false	#PZERO
   8 0832 a9 00        			LDA #$00
   9 0834 48           			PHA
 255 0835 e8 e8 e8 e8  	doinx	.repeat 6, $e8 ; 6 times INX	
     0839 e8 e8 
 256 083b 9a           			TXS
 289 083c 68           PLA
 290 083d 8d 00 c0     STA $C000
 291                   
 292                   #PBYTE 12
  18 0840 a9 0c        			LDA #\1
  19 0842 48           			PHA
 293                   #PBYTE 234
  18 0843 a9 ea        			LDA #\1
  19 0845 48           			PHA
 294                   #PBYTE 0
  18 0846 a9 00        			LDA #\1
  19 0848 48           			PHA
 295                   
 296                   #PBYTE 12
  18 0849 a9 0c        			LDA #\1
  19 084b 48           			PHA
 297                   #PBYTE 234
  18 084c a9 ea        			LDA #\1
  19 084e 48           			PHA
 298                   #PBYTE 0
  18 084f a9 00        			LDA #\1
  19 0851 48           			PHA
 299                   
 300                   #CMPINEQ
 261 0852 ba           			TSX
 262 0853 bd 06 01     			LDA STACK+6, x
 263 0856 dd 03 01     			CMP STACK+3, x
 264 0859 f0 16        			BEQ false
 265 085b bd 05 01     			LDA STACK+5, x
 266 085e dd 02 01     			CMP STACK+2, x
 267 0861 f0 0e        			BEQ false
 268 0863 bd 04 01     			LDA STACK+4, x
 269 0866 dd 01 01     			CMP STACK+1, x
 270 0869 f0 06        			BEQ false
 271                   			#PONE
  13 086b a9 01        			LDA #$01
  14 086d 48           			PHA
 272 086e 4c 74 08     			JMP doinx
 273                   	false	#PZERO
   8 0871 a9 00        			LDA #$00
   9 0873 48           			PHA
 274 0874 e8 e8 e8 e8  	doinx	.repeat 6, $e8 ; 6 times INX	
     0878 e8 e8 
 275 087a 9a           			TXS
 301 087b 68           PLA
 302 087c 8d 01 c0     STA $C001
 303                   
 304                   #PBYTE 12
  18 087f a9 0c        			LDA #\1
  19 0881 48           			PHA
 305                   #PBYTE 234
  18 0882 a9 ea        			LDA #\1
  19 0884 48           			PHA
 306                   #PBYTE 1
  18 0885 a9 01        			LDA #\1
  19 0887 48           			PHA
 307                   
 308                   #PBYTE 12
  18 0888 a9 0c        			LDA #\1
  19 088a 48           			PHA
 309                   #PBYTE 234
  18 088b a9 ea        			LDA #\1
  19 088d 48           			PHA
 310                   #PBYTE 0
  18 088e a9 00        			LDA #\1
  19 0890 48           			PHA
 311                   
 312                   #CMPIEQ
 242 0891 ba           			TSX
 243 0892 bd 06 01     			LDA STACK+6, x
 244 0895 dd 03 01     			CMP STACK+3, x
 245 0898 d0 16        			BNE false
 246 089a bd 05 01     			LDA STACK+5, x
 247 089d dd 02 01     			CMP STACK+2, x
 248 08a0 d0 0e        			BNE false
 249 08a2 bd 04 01     			LDA STACK+4, x
 250 08a5 dd 01 01     			CMP STACK+1, x
 251 08a8 d0 06        			BNE false
 252                   			#PONE
  13 08aa a9 01        			LDA #$01
  14 08ac 48           			PHA
 253 08ad 4c b3 08     			JMP doinx
 254                   	false	#PZERO
   8 08b0 a9 00        			LDA #$00
   9 08b2 48           			PHA
 255 08b3 e8 e8 e8 e8  	doinx	.repeat 6, $e8 ; 6 times INX	
     08b7 e8 e8 
 256 08b9 9a           			TXS
 313 08ba 68           PLA
 314 08bb 8d 02 c0     STA $C002
 315                   
 316                   
 317                   #PBYTE 12
  18 08be a9 0c        			LDA #\1
  19 08c0 48           			PHA
 318                   #PBYTE 234
  18 08c1 a9 ea        			LDA #\1
  19 08c3 48           			PHA
 319                   #PBYTE 1
  18 08c4 a9 01        			LDA #\1
  19 08c6 48           			PHA
 320                   
 321                   #PBYTE 12
  18 08c7 a9 0c        			LDA #\1
  19 08c9 48           			PHA
 322                   #PBYTE 234
  18 08ca a9 ea        			LDA #\1
  19 08cc 48           			PHA
 323                   #PBYTE 0
  18 08cd a9 00        			LDA #\1
  19 08cf 48           			PHA
 324                   
 325                   #CMPINEQ
 261 08d0 ba           			TSX
 262 08d1 bd 06 01     			LDA STACK+6, x
 263 08d4 dd 03 01     			CMP STACK+3, x
 264 08d7 f0 16        			BEQ false
 265 08d9 bd 05 01     			LDA STACK+5, x
 266 08dc dd 02 01     			CMP STACK+2, x
 267 08df f0 0e        			BEQ false
 268 08e1 bd 04 01     			LDA STACK+4, x
 269 08e4 dd 01 01     			CMP STACK+1, x
 270 08e7 f0 06        			BEQ false
 271                   			#PONE
  13 08e9 a9 01        			LDA #$01
  14 08eb 48           			PHA
 272 08ec 4c f2 08     			JMP doinx
 273                   	false	#PZERO
   8 08ef a9 00        			LDA #$00
   9 08f1 48           			PHA
 274 08f2 e8 e8 e8 e8  	doinx	.repeat 6, $e8 ; 6 times INX	
     08f6 e8 e8 
 275 08f8 9a           			TXS
 326 08f9 68           PLA
 327 08fa 8d 03 c0     STA $C003
 328                   
 329 08fd 60           RTS
 330                   
 331                   
